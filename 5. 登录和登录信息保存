1. 涉及到的技术，vue-router和vuex
参考：
https://github.com/doterlin/vue-example-login

在一般的登录过程中，一种前端方案是：

检查状态：进入页面时或者路由变化时检查是否有登录状态(保存在cookie或者本地存储的值)；
如果有登录态则查询登录信息(uid，头像等...)并保存起来；如果没有则跳转到登录页；
在登录页面（或者登录框），校检用户输入信息是否合法；
校检通过后发送登录请求；校检不成功则反馈给用户；
登录成功则从后端数据中取出session信息保存登录状态(可能需要跳转);登录不成功则提示用户不成功；
用户做出注销操作时删除登录状态。

一、
1.首先配置路由 login.vue
2.设置检查是否登录的方法
3.当用户打开页面时前端需要检查他是否已经登录，不需要用户再次登录。这个实现很简单,我们在vue实例的created钩子里写好：
4.另外，路由发生变化时也需要检查登录，以下情景(路由变化)如果我们不检查登录态可能会发生错误：
用户在进入页面时存在登录状态，但在做操作时正好登录过期了；
用户手动删除了cookie/本地storage并做操作；
用户在未登录的情况下手动输入(或者从收藏夹进入)某个需要登录的路由
用户在已登录的情况下进入登录页路由
可以用watch方法
Vue.js 提供了一个方法 watch，它用于观察Vue实例上的数据变动。对应一个对象，键是观察表达式，值是对应回调。值也可以是方法名，或者是对象，包含选项

二、
获取用户信息
在成功登录后，我们一般需要从后端显示用户的一些信息，比如昵称，头像，等级等等...获取的话很简单，发一个http请求从后端拉取；但是一般这些信息会在多的路由用到（比如uid一般都需要在各个后端接口中作为参数带上），所以需要保存到全局状态中(vuex)：

三、
输入校验和发送登录请求

